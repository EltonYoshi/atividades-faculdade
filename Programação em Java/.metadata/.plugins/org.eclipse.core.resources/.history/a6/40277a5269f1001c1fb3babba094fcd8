package app;

import java.io.IOException;
import java.util.Scanner;
public class MenuOpcaoController {
	private Scanner sc;
	private FuncaoCadastroEventoPublico cadastroEvento;
	private FuncaoCadastroEventoPrivado cadastroEventoPrivado;
	private FuncaoCadastroUsuario cadastroUsuario;
		
	//Construtor
	public MenuOpcaoController() {
		this.sc = new Scanner(System.in);
		this.cadastroEvento = new FuncaoCadastroEventoPublico();
		this.cadastroUsuario = new FuncaoCadastroUsuario();
		this.cadastroEventoPrivado = new FuncaoCadastroEventoPrivado();
	}

	
	// Método voltado para caso o usuário deseje adicionar mais um conviadado em seu EVENTO PRIVADO
	public void convidarOutroPrivado() {
		
		//Loop que repete o cadastramento de diferentes usuários no evento
		int esc = 0;
		do {
			cadastroEventoPrivado.cadastrarConvidado(cadastroUsuario.getArmazenamentoDoUsuario(), 
					cadastroEventoPrivado.getArmazenamentoDeEventos());
			System.out.println("Deseja convidar outro usuário?");
			System.out.println("1 - Sim");
			System.out.println("0 - Não");
			System.out.println("Escolha: ");
			esc = Integer.parseInt(sc.nextLine());
		}while(esc == 1);
	}
	
	
	/*Médodo que recebe a escolha da Classe MenuOpcao e executa condições conforme 
	 * o valor da variável escolha*/
	public void efetuaEscolha(int escolha) {
		switch(escolha){
		case 1:
			System.out.println("\nCADASTRO DO USUÁRIO: \n");
			cadastroUsuario.telaCadastroDoUsuario();
			System.out.println("\nCadastro concluído com sucesso!\n");
			
			break;
		case 2:
			
			/*Loop para confirmar que o usuário não irá colocar 
			 * um valor maior ou menor que os informados nas opções*/
			int op = 0;
			do {
				/*Menu de escolha para definir se a categoria do EVENTO,
				 * será PRIVADA ou PÚBLICA*/
				
				System.out.println("\nQual categoria de evento você deseja?\n");
				System.out.println("1 - Público");
				System.out.println("0 - Privado");
				System.out.println("Escolha: ");
				op = Integer.parseInt(sc.nextLine());
				
			}while(op < 0 || op > 1 );
			
			/*Estrutura de condição que depende do valor escolhido pelo usuário no
			 * loop a cima*/
			
			if(op == 1) {
				System.out.println("\nCADASTRO DE EVENTO PÚBLICO: \n");
				//Retorna uma tela para o cadastro de EVENTOS PÚBLICOS
				cadastroEvento.telaCadastroDoEvento();
				
			} else if(op == 0) {
				//Retorna uma tela para o cadastro de EVENTOS PRIVADOS
				System.out.println("\nCADASTRO DE EVENTO PRIVADO: \n");
				cadastroEventoPrivado.telaCadastroDoEvento();
				
				//Retorna o método que permite o usuário convidar outro usuário para seu EVENTO PRIVADO
				convidarOutroPrivado();
				
			}
			
			
			break;
		case 3:
			FuncaoParticiparEvento participarEvento = new FuncaoParticiparEvento(cadastroEvento.getArmazenamentoDeEventos(),
					cadastroUsuario.getArmazenamentoDoUsuario());
			
			//Retorna os EVENTOS PÚBLICOS disponíveis para o usuário se cadastrar
			participarEvento.mostrarEventos();
			
			//Retorna um menu escolha para o usuário escolher um EVENTO PÚBLICO
			participarEvento.escolherEvento();
			break;
			
		case 4:
			FuncaoEventosDoUsuario eventosDoUsuario = new FuncaoEventosDoUsuario(cadastroEvento.getArmazenamentoDeEventos());
			
			eventosDoUsuario.mostrarEventosDoUsuario();
			eventosDoUsuario.cancelarParticipacao();
			break;
			
		case 5:
			FuncaoMostrarEventosPrivados mostrarEventosPrivados = new FuncaoMostrarEventosPrivados(cadastroEventoPrivado.getArmazenamentoDeEventos());
			mostrarEventosPrivados.mostrarEventosDoUsuario();
			
			break;
			
		case 6:
			FuncaoMostrarEventosPublicos mostrarEventosPublicos = new FuncaoMostrarEventosPublicos(cadastroEvento.getArmazenamentoDeEventos());
			
			mostrarEventosPublicos.eventosOcorridos();
			mostrarEventosPublicos.eventosOcorrer();
			mostrarEventosPublicos.eventosOcorrendo();
			
			break;
		default:
			System.out.println("Erro na execução do Programa");
			break;
		}
		
	}


}
